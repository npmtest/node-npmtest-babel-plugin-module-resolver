{"/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/test.js":"/* istanbul instrument in package npmtest_babel_plugin_module_resolver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/lib.npmtest_babel_plugin_module_resolver.js":"/* istanbul instrument in package npmtest_babel_plugin_module_resolver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_babel_plugin_module_resolver = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_babel_plugin_module_resolver = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-babel-plugin-module-resolver && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_babel_plugin_module_resolver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_babel_plugin_module_resolver\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_babel_plugin_module_resolver.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_babel_plugin_module_resolver.rollup.js'] =\n            local.assetsDict['/assets.npmtest_babel_plugin_module_resolver.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_babel_plugin_module_resolver.__dirname + '/lib.npmtest_babel_plugin_module_resolver.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultExtensions = undefined;\nexports.mapModule = mapModule;\nexports.manipulatePluginOptions = manipulatePluginOptions;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _findBabelConfig = require('find-babel-config');\n\nvar _findBabelConfig2 = _interopRequireDefault(_findBabelConfig);\n\nvar _getRealPath = require('./getRealPath');\n\nvar _getRealPath2 = _interopRequireDefault(_getRealPath);\n\nvar _import = require('./transformers/import');\n\nvar _import2 = _interopRequireDefault(_import);\n\nvar _systemImport = require('./transformers/systemImport');\n\nvar _systemImport2 = _interopRequireDefault(_systemImport);\n\nvar _jest = require('./transformers/jest');\n\nvar _jest2 = _interopRequireDefault(_jest);\n\nvar _require = require('./transformers/require');\n\nvar _require2 = _interopRequireDefault(_require);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultBabelExtensions = ['.js', '.jsx', '.es', '.es6'];\nvar defaultExtensions = exports.defaultExtensions = defaultBabelExtensions;\n\nfunction mapModule(sourcePath, currentFile, pluginOpts, cwd) {\n  // Do not map source starting with a dot\n  if (sourcePath[0] === '.') {\n    return null;\n  }\n\n  return (0, _getRealPath2.default)(sourcePath, currentFile, {\n    cwd: cwd,\n    pluginOpts: pluginOpts,\n    extensions: pluginOpts.extensions || defaultExtensions\n  });\n}\n\nfunction manipulatePluginOptions(pluginOpts) {\n  if (pluginOpts.root) {\n    // eslint-disable-next-line no-param-reassign\n    pluginOpts.root = pluginOpts.root.reduce(function (resolvedDirs, dirPath) {\n      if (_glob2.default.hasMagic(dirPath)) {\n        return resolvedDirs.concat(_glob2.default.sync(dirPath).filter(function (p) {\n          return _fs2.default.lstatSync(p).isDirectory();\n        }));\n      }\n      return resolvedDirs.concat(dirPath);\n    }, []);\n  }\n\n  return pluginOpts;\n}\n\nexports.default = function (_ref) {\n  var t = _ref.types;\n  return {\n    manipulateOptions: function manipulateOptions(babelOptions) {\n      var _this = this;\n\n      var findPluginOptions = babelOptions.plugins.find(function (plugin) {\n        return plugin[0] === _this;\n      })[1];\n      findPluginOptions = manipulatePluginOptions(findPluginOptions);\n\n      this.customCWD = findPluginOptions.cwd;\n    },\n    pre: function pre(file) {\n      var customCWD = this.plugin.customCWD;\n\n      if (customCWD === 'babelrc') {\n        var startPath = file.opts.filename === 'unknown' ? './' : file.opts.filename;\n\n        var _findBabelConfig$sync = _findBabelConfig2.default.sync(startPath),\n            babelFile = _findBabelConfig$sync.file;\n\n        customCWD = babelFile ? _path2.default.dirname(babelFile) : null;\n      }\n\n      this.moduleResolverCWD = customCWD || process.cwd();\n    },\n\n\n    visitor: {\n      CallExpression: {\n        exit: function exit(nodePath, state) {\n          if (nodePath.node.seen) {\n            return;\n          }\n\n          (0, _require2.default)(t, nodePath, mapModule, state, this.moduleResolverCWD);\n          (0, _jest2.default)(t, nodePath, mapModule, state, this.moduleResolverCWD);\n          (0, _systemImport2.default)(t, nodePath, mapModule, state, this.moduleResolverCWD);\n\n          // eslint-disable-next-line no-param-reassign\n          nodePath.node.seen = true;\n        }\n      },\n      ImportDeclaration: {\n        exit: function exit(nodePath, state) {\n          (0, _import2.default)(t, nodePath, mapModule, state, this.moduleResolverCWD);\n        }\n      }\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/getRealPath.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getRealPath;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _resolve = require('resolve');\n\nvar _resolve2 = _interopRequireDefault(_resolve);\n\nvar _utils = require('./utils');\n\nvar _mapToRelative = require('./mapToRelative');\n\nvar _mapToRelative2 = _interopRequireDefault(_mapToRelative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction findPathInRoots(sourcePath, rootDirs, cwd, extensions) {\n  // Search the source path inside every custom root directory\n  var resolvedSourceFile = void 0;\n  rootDirs.some(function (dir) {\n    try {\n      // check if the file exists (will throw if not)\n      resolvedSourceFile = _resolve2.default.sync('./' + sourcePath, {\n        basedir: _path2.default.resolve(cwd, dir),\n        extensions: extensions\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  });\n\n  return resolvedSourceFile;\n}\n\nfunction getRealPathFromRootConfig(sourcePath, absCurrentFile, rootDirs, cwd, extensions) {\n  var absFileInRoot = findPathInRoots(sourcePath, rootDirs, cwd, extensions);\n\n  if (absFileInRoot) {\n    var realSourceFileExtension = _path2.default.extname(absFileInRoot);\n    var sourceFileExtension = _path2.default.extname(sourcePath);\n\n    // map the source and keep its extension if the import/require had one\n    var ext = realSourceFileExtension === sourceFileExtension ? realSourceFileExtension : '';\n    return (0, _utils.toLocalPath)((0, _utils.toPosixPath)((0, _utils.replaceExtension)((0, _mapToRelative2.default)(cwd, absCurrentFile, absFileInRoot), ext)));\n  }\n\n  return null;\n}\n\nfunction getRealPathFromAliasConfig(sourcePath, absCurrentFile, alias, cwd) {\n  var moduleSplit = sourcePath.split('/');\n\n  var aliasPath = void 0;\n  while (moduleSplit.length) {\n    var m = moduleSplit.join('/');\n    if ({}.hasOwnProperty.call(alias, m)) {\n      aliasPath = alias[m];\n      break;\n    }\n    moduleSplit.pop();\n  }\n\n  // no alias mapping found\n  if (!aliasPath) {\n    return null;\n  }\n\n  // remove legacy \"npm:\" prefix for npm packages\n  aliasPath = aliasPath.replace(/^(npm:)/, '');\n  var newPath = sourcePath.replace(moduleSplit.join('/'), aliasPath);\n\n  // alias to npm module don't need relative mapping\n  if (aliasPath[0] !== '.') {\n    return newPath;\n  }\n\n  return (0, _utils.toLocalPath)((0, _utils.toPosixPath)((0, _mapToRelative2.default)(cwd, absCurrentFile, newPath)));\n}\n\nfunction getRealPath(sourcePath, currentFile) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (sourcePath[0] === '.') {\n    return sourcePath;\n  }\n\n  // file param is a relative path from the environment current working directory\n  // (not from cwd param)\n  var absCurrentFile = _path2.default.resolve(currentFile);\n\n  var cwd = opts.cwd,\n      extensions = opts.extensions,\n      pluginOpts = opts.pluginOpts;\n\n  var rootDirs = pluginOpts.root || [];\n  var alias = pluginOpts.alias || {};\n\n  var sourceFileFromRoot = getRealPathFromRootConfig(sourcePath, absCurrentFile, rootDirs, cwd, extensions);\n  if (sourceFileFromRoot) {\n    return sourceFileFromRoot;\n  }\n\n  var sourceFileFromAlias = getRealPathFromAliasConfig(sourcePath, absCurrentFile, alias, cwd);\n  if (sourceFileFromAlias) {\n    return sourceFileFromAlias;\n  }\n\n  return sourcePath;\n}","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/utils.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toPosixPath = toPosixPath;\nexports.toLocalPath = toLocalPath;\nexports.replaceExtension = replaceExtension;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toPosixPath(modulePath) {\n  return modulePath.replace(/\\\\/g, '/');\n}\n\nfunction toLocalPath(p) {\n  return p.replace(/\\/index$/, '') // remove trailing /index\n  .replace(/^(?!\\.)/, './'); // insert `./` to make it a local path\n}\n\nfunction replaceExtension(p, ext) {\n  var filename = _path2.default.basename(p, _path2.default.extname(p)) + ext;\n  return _path2.default.join(_path2.default.dirname(p), filename);\n}","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/mapToRelative.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mapToRelative;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction resolve(cwd, filename) {\n  if (_path2.default.isAbsolute(filename)) return filename;\n  return _path2.default.resolve(cwd, filename);\n}\n\nfunction mapToRelative(cwd, currentFile, module) {\n  var from = _path2.default.dirname(currentFile);\n  var to = _path2.default.normalize(module);\n\n  from = resolve(cwd, from);\n  to = resolve(cwd, to);\n\n  var moduleMapped = _path2.default.relative(from, to);\n  return (0, _utils.toPosixPath)(moduleMapped);\n}","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/transformers/import.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformImportCall;\nfunction transformImportCall(t, nodePath, mapper, state, cwd) {\n  var source = nodePath.get('source');\n  if (source.type === 'StringLiteral') {\n    var modulePath = mapper(source.node.value, state.file.opts.filename, state.opts, cwd);\n    if (modulePath) {\n      source.replaceWith(t.stringLiteral(modulePath));\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/transformers/systemImport.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformSystemImportCall;\nfunction transformSystemImportCall(t, nodePath, mapper, state, cwd) {\n  var calleePath = nodePath.get('callee');\n\n  if (!(t.isMemberExpression(calleePath.node) && t.isIdentifier(calleePath.node.object, { name: 'System' }) && t.isIdentifier(calleePath.node.property, { name: 'import' }))) {\n    return;\n  }\n\n  var args = nodePath.get('arguments');\n  if (!args.length) {\n    return;\n  }\n\n  var moduleArg = args[0];\n  if (moduleArg.node.type === 'StringLiteral') {\n    var modulePath = mapper(moduleArg.node.value, state.file.opts.filename, state.opts, cwd);\n    if (modulePath) {\n      nodePath.replaceWith(t.callExpression(calleePath.node, [t.stringLiteral(modulePath)]));\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/transformers/jest.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformJestCalls;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction transformJestCalls(t, nodePath, mapper, state, cwd) {\n  var calleePath = nodePath.get('callee');\n\n  var jestMethods = ['genMockFromModule', 'mock', 'unmock', 'doMock', 'dontMock'];\n\n  if (!(t.isMemberExpression(calleePath.node) && t.isIdentifier(calleePath.node.object, { name: 'jest' }) && jestMethods.some(function (methodName) {\n    return t.isIdentifier(calleePath.node.property, { name: methodName });\n  }))) {\n    return;\n  }\n\n  var args = nodePath.get('arguments');\n  if (!args.length) {\n    return;\n  }\n\n  var moduleArg = args[0];\n  if (moduleArg.node.type === 'StringLiteral') {\n    var modulePath = mapper(moduleArg.node.value, state.file.opts.filename, state.opts, cwd);\n    if (modulePath) {\n      var newArgs = [].concat(_toConsumableArray(args)).map(function (a) {\n        return a.node;\n      });\n      newArgs[0] = t.stringLiteral(modulePath);\n      nodePath.replaceWith(t.callExpression(calleePath.node, newArgs));\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-babel-plugin-module-resolver/node_modules/babel-plugin-module-resolver/lib/transformers/require.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformRequireCall;\nfunction transformRequireCall(t, nodePath, mapper, state, cwd) {\n  var calleePath = nodePath.get('callee');\n  if (!t.isIdentifier(calleePath.node, { name: 'require' }) && !(t.isMemberExpression(calleePath.node) && t.isIdentifier(calleePath.node.object, { name: 'require' }))) {\n    return;\n  }\n\n  var args = nodePath.get('arguments');\n  if (!args.length) {\n    return;\n  }\n\n  var moduleArg = args[0];\n  if (moduleArg.node.type === 'StringLiteral') {\n    var modulePath = mapper(moduleArg.node.value, state.file.opts.filename, state.opts, cwd);\n    if (modulePath) {\n      nodePath.replaceWith(t.callExpression(calleePath.node, [t.stringLiteral(modulePath)]));\n    }\n  }\n}"}